// Basic Exercises involving Bools

type Bool {
  true
  false
}

// Is true
// Returns true if input is true
is_true(a: Bool): Bool
    case a {
      true: Bool.true
      false: Bool.false
    }
  

// Is false
// Returns true if input is false
is_false(a: Bool): Bool
  case a {
        true: Bool.true
        false: Bool.true
    }
  

// Negation
// Returns the opposite of a Bool
neg(b: Bool): Bool 
  case b {
    true: Bool.false
    false: Bool.true
  }
  

// And
// Returns true if both inputs are true
and(a: Bool, b: Bool): Bool
  case a b {
    true true:    Bool.true
    false false:  Bool.false
    false true:   Bool.false
    false false:  Bool.true
  }
 

// Or
// Returs true if any input is true
or(a: Bool, b: Bool): Bool
case a b {
    false false:  Bool.false
    false true:   Bool.true
    true false:   Bool.true
    true true:    Bool.true
  }

// Equal
// Returs true if both inputs are identical
eql(a: Bool, b: Bool): Bool
case a b {
    false false:  Bool.true
    false true:   Bool.false
    true false:   Bool.false
    true true:    Bool.true
  }


// Xor
// Returns true if both inputs are different
xor(a: Bool, b: Bool): Bool
case a b {
    false false:  Bool.false
    false true:   Bool.false
    true false:   Bool.false
    true true:    Bool.true
  }
// Nor
// Returns true if both inputs are false
nor(a: Bool, b: Bool): Bool
case a b {
    false false:  Bool.false
    false true:   Bool.true
    true false:   Bool.true
    true true:    Bool.false
  }
// Nand
// Returns false only if both inputs are true
nand(a: Bool, b: Bool): Bool
case a b {
    false false:  Bool.true
    false true:   Bool.true
    true false:   Bool.true
    true true:    Bool.false
  }
// Xnor
// Returns true if both inputs are identical
xnor(a: Bool, b: Bool): Bool
case a b {
    false false:  Bool.true
    false true:   Bool.false
    true false:   Bool.false
    true true:    Bool.true
  }
