// type MaybeBool
// It maybe holds a Boolean inside it

type MaybeBool { 
  none 
  some(value: none)
 }
 // Returns true if Maybe is none
is_none(a: MaybeBool): Bool
  case a {
    none: true
    some: false 
  }
    
// Returns true if Maybe is some
is_some(a: MaybeBool): Bool
<<<<<<< HEAD
   case a {
     none: false
     some: true 
   }
=======
  case a {
    none: false
    some: true
  }

>>>>>>> 90626ad (update)
// Returns true if both inputs are identical
// eql(MaybeBool.none,             MaybeBool.none            ) -> true
// eql(MaybeBool.some(Bool.false), MaybeBool.none            ) -> false
// eql(MaybeBool.some(Bool.true),  MaybeBool.some(Bool.false)) -> false
// eql(MaybeBool.some(Bool.false), MaybeBool.some(Bool.false)) -> true

eql(a: MaybeBool, b: MaybeBool): Bool
  case a b {
<<<<<<< HEAD
    none none : true
    some some: Bool.eql(a.value, b.value)
  } default false
=======
    none none: true
    some some: Bool.eql(a.value, b.value)
  } 

>>>>>>> 90626ad (update)

// Returns the value inside the MaybeBool.
// If there is no value contained, returns v instead
extract(a: MaybeBool, v: Bool): Bool
  case a {
<<<<<<< HEAD
    none: v 
=======
    none: v
>>>>>>> 90626ad (update)
    some: a.value
  }

// Create a MaybeBool from a Boolean
// create(Bool.false) -> MaybeBool(Bool.false)
<<<<<<< HEAD
create(a:Bool): MaybeBool
  MaybeBool.some(a)
=======
create(a: Bool): MaybeBool
  MaybeBool.some(a) 
>>>>>>> 90626ad (update)

// Returns the first input that is a MaybeBool.some
// Returns MaybeBool.none if both are MaybeBool.none
or(a: MaybeBool, b: MaybeBool) : MaybeBool 
  case a b {
    none none: MaybeBool.none
    none some: b 
  } default a

ex_01:_
  or(MaybeBool.some(false), MaybeBool.some(false))
