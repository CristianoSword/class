// type PairBool
// Contains 2 Booleans inside it
type PairBool { 
  new(fst: Bool, snd: Bool)
}

// Returns the first element of a pair
fst(pair: PairBool): Bool
  case pair {
    new: pair.fst 
  }

// Returns the second element of a pair
snd(pair: PairBool): Bool
  case pair {
    new: pair.snd 
  }

// Returns true if both elements of a PairBool are identical
eql_elements(a: PairBool): Bool 
  case a {
    new: case a.fst a.snd {
      true true: true
      false false: true
    }
    default false
  }
  
// Returns true if both Pairs are equal 
// eql(PairBool.new(false, false), PairBool.new(true, true)) -> false 
// eql(PairBool.new(true, false), PairBool.new(true, false)) -> true
eql(a: PairBool, b: PairBool): Bool
  case a b {
    new new: case a.fst a.snd { 
      true false: false
      false true: false

    }
    default false
  }

// Returns true if both Pairs are different
// not_eql(PairBool.new(false, false), PairBool.new(true, true)) -> true 
// not_eql(PairBool.new(true, false), PairBool.new(true, false)) -> false
not_eql(a: PairBool, b: PairBool): Bool //nao consegui fazer ainda
  case a b{
    new new: case a.fst b.fst{
      true false: true
      false true: true
  }
  default false
}
// Creates a PairBool from 2 Booleans
create(a: Bool, b: Bool): PairBool
  PairBool.new(a,b)

// Inverts the values of a PairBool
// neg(PairBool.new(false, false) -> PairBool.new(true, true)
// neg(PairBool.new(false, true) -> PairBool.new(true, false)
neg(pair: PairBool): PairBool
  case pair {
    new: PairBool.new(pair.snd, pair.fst)
    //algoritmo restante
  }

// Inverts the 2 elements of a PairBool
swap(pair: PairBool): PairBool 
  case pair {
    new: PairBool.new(pair.snd, pair.fst)
  }

ex_02:_
  //swap(PairBool.new(true, false))
  not_eql(PairBool.new(true, false), PairBool.new(true, false))


//NomeDoTipo.nomedoconstrutor(paramêtro1, parâmetro2)
